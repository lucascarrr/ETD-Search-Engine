function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { unique } from "d3plus-common";
var cartesian = function cartesian(a, b) {
  var _ref;
  return (_ref = []).concat.apply(_ref, _toConsumableArray(a.map(function (d) {
    return b.map(function (e) {
      return [].concat(d, e);
    });
  })));
};

/**
 * @private
 */
export default function () {
  var _this = this;
  var data = this._filteredData;
  var rowValues = (this._rowList || unique(data.map(this._row))).sort(this._rowSort);
  var columnValues = (this._columnList || unique(data.map(this._column))).sort(this._columnSort);
  if (!rowValues.length || !columnValues.length) return this;
  var shapeData = cartesian(rowValues, columnValues).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      rowValue = _ref3[0],
      columnValue = _ref3[1];
    var dataObj = {
      __d3plusTooltip__: true,
      __d3plus__: true,
      column: columnValue,
      row: rowValue
    };
    var dataIndex = data.findIndex(function (d, i) {
      return _this._row(d, i) === rowValue && _this._column(d, i) === columnValue;
    });
    if (dataIndex >= 0) {
      dataObj.i = dataIndex;
      dataObj.data = data[dataIndex];
    } else {
      dataObj.data = {
        row: rowValue,
        column: columnValue
      };
    }
    return dataObj;
  });
  return {
    rowValues: rowValues,
    columnValues: columnValues,
    shapeData: shapeData
  };
}