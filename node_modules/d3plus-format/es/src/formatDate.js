function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { timeYear, timeMonth, timeHour, timeMinute, timeSecond } from "d3-time";
import { timeFormat } from "d3-time-format";
var formatHour = timeFormat("%I %p"),
  formatMillisecond = timeFormat(".%L"),
  formatMinute = timeFormat("%I:%M"),
  formatMonth = timeFormat("%b"),
  formatMonthDay = timeFormat("%b %-d"),
  formatMonthDayYear = timeFormat("%b %-d, %Y"),
  formatMonthYear = timeFormat("%b %Y"),
  formatQuarter = timeFormat("Q%q"),
  formatQuarterYear = timeFormat("Q%q %Y"),
  formatSecond = timeFormat(":%S"),
  formatYear = timeFormat("%Y");

/**
    @function formatDate
    @desc A default set of date formatters, which takes into account both the interval in between in each data point but also the start/end data points.
    @param {Date} d The date string to be formatted.
    @param {Array} dataArray The full array of ordered Date Objects.
    @returns {String}
*/
export default function (d, dataArray) {
  var labelIndex = dataArray.findIndex(function (a) {
    return +a === +d;
  });
  var firstOrLast = labelIndex === 0 || labelIndex === dataArray.length - 1;
  var smallArray = dataArray.length <= 5;
  var _dataArray$reduce = dataArray.reduce(function (arr, d, i) {
      if (i) {
        arr[0].push(d.getFullYear() - dataArray[i - 1].getFullYear());
        arr[1].push(monthDiff(dataArray[i - 1], d));
        arr[2].push(Math.round((d - dataArray[i - 1]) / (1000 * 60 * 60 * 24)));
        arr[3].push(Math.round((d - dataArray[i - 1]) / (1000 * 60 * 60)));
      }
      return arr;
    }, [[], [], [], []]),
    _dataArray$reduce2 = _slicedToArray(_dataArray$reduce, 4),
    yearlySteps = _dataArray$reduce2[0],
    monthlySteps = _dataArray$reduce2[1],
    dailySteps = _dataArray$reduce2[2],
    hourlySteps = _dataArray$reduce2[3];
  return (yearlySteps.every(function (s) {
    return s >= 1 && !(s % 1);
  }) // Yearly Data 
  ? formatYear : monthlySteps.every(function (s) {
    return s >= 3 && !(s % 3);
  }) // Quarterly Data
  ? +timeYear(d) === d || firstOrLast || smallArray ? formatQuarterYear : formatQuarter : monthlySteps.every(function (s) {
    return s >= 1 && !(s % 1);
  }) // Monthly Data
  ? +timeYear(d) === d || firstOrLast || smallArray ? formatMonthYear : formatMonth : dailySteps.every(function (s) {
    return s >= 1 && !(s % 1);
  }) // Daily Data
  ? +timeYear(d) === d || firstOrLast || smallArray ? formatMonthDayYear : formatMonthDay : hourlySteps.every(function (s) {
    return s >= 1 && !(s % 1);
  }) // Hourly Data
  ? firstOrLast || smallArray ? formatMonthDayYear : +timeMonth(d) === d ? formatMonthDay : formatHour : timeSecond(d) < d ? formatMillisecond : timeMinute(d) < d ? formatSecond : timeHour(d) < d ? formatMinute : d)(d);
}

/**
    @function monthDiff
    @desc Returns the number of months between two Date objects
    @param {*} d1
    @param {*} d2
    @returns {Number} the number of months between the two Date objects
    @private
*/
function monthDiff(d1, d2) {
  var months;
  months = (d2.getFullYear() - d1.getFullYear()) * 12;
  months -= d1.getMonth();
  months += d2.getMonth();
  return months <= 0 ? 0 : months;
}